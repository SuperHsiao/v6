name: Build Cube Release
on:
  push:
    tags:
      - "**" # triggers only if push new tag version, like `0.8.4` or else
jobs:
    build:
        name: Build Binary
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                os: [windows-latest, macos-latest, ubuntu-latest]
                arch: [amd64, '386']
                include:
                    - os: windows-latest
                      goos: windows
                      bin: 'cube.exe'
                      args: -9
                      strip: true
                      releaseos: windows
                    - os: macos-latest
                      goos: darwin
                      bin: 'cube'
                      args: -9
                      strip: false
                      releaseos: osx
                    - os: ubuntu-latest
                      goos: linux
                      bin: 'cube'
                      args: -9
                      strip: true
                      releaseos: linux
                exclude:
                    - os: macos-latest
                      arch: '386'
                    - os: windows-latest
                      arch: '386'
        steps:
            - name: Set up Go
              uses: actions/setup-go@v2
              with:
                go-version: 1.16
            - if: matrix.os == 'ubuntu-latest'
              run: sudo apt-get update && sudo apt-get install -y gcc-multilib
            - if: matrix.arch == '386'
              run: echo "RELEASE=cube${{ github.event.release.tag_name}}-${{ matrix.releaseos}}-32bit" >> $GITHUB_ENV
            - if: matrix.arch == 'amd64'
              run: echo "RELEASE=cube${{ github.event.release.tag_name}}-${{ matrix.releaseos}}-64bit" >> $GITHUB_ENV
            - if: matrix.os == 'windows-latest'
              shell: powershell
              run: echo "RELEASE=cube${{ github.event.release.tag_name}}-${{ matrix.releaseos}}-64bit" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
            - uses: actions/checkout@v2
            - name: Build ${{ matrix.goos }}/${{ matrix.arch }}
              run: go build -ldflags '-w -s' -o ${{ matrix.bin }}
              env:
                GOOS: ${{ matrix.goos }}
                GOARCH: ${{ matrix.arch }}
                CGO_ENABLED: 1
            - uses: svenstaro/upx-action@v2
              with:
                args: ${{ matrix.args }}
                file: ${{ matrix.bin }}
                strip: ${{ matrix.strip }}
            - name: Upload to artifacts
              uses: actions/upload-artifact@v2
              with:
                name: ${{ env.RELEASE }}
                path: ${{ matrix.bin }}
    package:
        name: Package Assets
        runs-on: ubuntu-latest
        needs: build
        steps:
            - uses: actions/checkout@v2
            - uses: actions/download-artifact@v2
              with:
                path: bin
            - name: Package Releases
              run: |
                mkdir releases;
                for RELEASE_DIR in bin/*
                do
                  echo "Creating release $RELEASE_DIR"
                  for BINARY in $RELEASE_DIR/*
                  do
                    chmod 777 $BINARY;
                    cp $BINARY .;
                    zip -r releases/$(basename $RELEASE_DIR).zip \
                      $(basename ${BINARY}) \
                      README.md \
                      README_ZH.md;
                    rm $BINARY;
                  done
                done
            - name: Upload to artifacts
              uses: actions/upload-artifact@v2
              with:
                name: releases
                path: releases/*.zip

    upload:
        name: Upload to the Release
        runs-on: ubuntu-latest
        needs: package
        steps:
            - uses: actions/download-artifact@v2
              with:
                name: releases
                path: releases/
                
            - name: Create Release
              id: create_release
              uses: monkeyWie/create-release@master
              env:
                GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
              with:
                tag_name: ${{ github.ref }}
                release_name: Release ${{ github.ref }}
                draft: false
                prerelease: false
                  
            - name: Upload Archives to Release
              env:
                UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
                API_HEADER: "Accept: application/vnd.github.v3+json"
                AUTH_HEADER: "Authorization: token ${{ secrets.ACCESS_TOKEN }}"
              run: |
                UPLOAD_URL=$(echo -n $UPLOAD_URL | sed s/\{.*//g)
                for FILE in releases/*
                do
                  FILENAME=$(basename ${FILE})
                  HASH=$(sha256sum ${FILE} | cut -d ' ' -f 1)
                  echo "${HASH}    $FILENAME" >> releases/sha256.txt
                done
                
                for FILE in releases/*
                do
                  echo "Uploading ${FILE}";
                  curl \
                    -H "${API_HEADER}" \
                    -H "${AUTH_HEADER}" \
                    -H "Content-Type: $(file -b --mime-type ${FILE})" \
                    --data-binary "@${FILE}" \
                    "${UPLOAD_URL}?name=$(basename ${FILE})";
                done
            
